void	ft_init_one(t_data *data, char **env, int pip[2])
{
	t_cmd *cmd;

	cmd = (t_cmd *)malloc(sizeof(t_cmd) * 1);
	cmd->cmd_path = "/bin/ls";
	cmd->arg = (char **)malloc(sizeof(char *) * 3);
	cmd->arg[0] = "ls";
	cmd->arg[1] = "/Users/ezhou/minishell/src/";
	cmd->arg[2] = 0;
	cmd->env = (t_env *)malloc(sizeof(t_env) * 1);
	cmd->env->env_size = ft_dpointer_size(env);
	cmd->env->env = &(data->env);
	cmd->num_arg = 2;
	cmd->fds = (t_fds *)ft_calloc(1, sizeof(t_fds));
	cmd->fds->std_in = &data->std_in;
	cmd->fds->std_out = &data->std_out;
	cmd->fds->here_document = 0;
	cmd->fds->pipe[0] = pip[0];
	cmd->fds->pipe[1] = pip[1];
	cmd->fds->infile = open("test_struct.txt", O_RDONLY);
	cmd->fds->outfile = pip[1];
	data->cmd = cmd;
}

void	ft_init_two(t_data *data, char **env, int pip[2])
{
	t_cmd *cmd2;

	cmd2 = (t_cmd *)malloc(sizeof(t_cmd) * 1);
	cmd2->cmd_path = "/usr/bin/grep";
	cmd2->arg = (char **)malloc(sizeof(char *) * 3);
	cmd2->arg[0] = "grep";
	cmd2->arg[1] = "minishell";
	cmd2->arg[2] = 0;
	cmd2->env = (t_env *)malloc(sizeof(t_env) * 1);
	cmd2->env->env_size = ft_dpointer_size(env);
	cmd2->env->env = &(data->env);
	cmd2->num_arg = 2;
	cmd2->fds = (t_fds *)ft_calloc(1, sizeof(t_fds));
	cmd2->fds->std_in = &data->std_in;
	cmd2->fds->std_out = &data->std_out;
	cmd2->fds->here_document = 0;
	cmd2->fds->pipe[0] = pip[0];
	cmd2->fds->pipe[1] = pip[1];
	cmd2->fds->infile = pip[0];
	cmd2->fds->outfile = *cmd2->fds->std_out;
	data->cmd->next = cmd2;
}

int main(int argc, char **argv, char **env)
{
	t_data *data;
	t_cmd *cmd;
	t_cmd *cmd2;
	int	i = 0;
	int	pip[2];

	pipe(pip);
	data = (t_data *)ft_calloc(1, sizeof(t_data));
	data->std_in = dup(STDIN_FILENO);
	data->std_out = dup(STDOUT_FILENO);
	data->env = ft_dpointer_dupe(env);

	ft_init_one(data, env, pip);
	ft_init_two(data,env, pip);
	ft_env(&data->cmd);
	printf("\n");
	ft_cd(&data->cmd);
	ft_env(&data->cmd);
	return (0);
}